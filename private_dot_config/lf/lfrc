%[ $LF_LEVEL -eq 1 ] || echo "Warning: You're in a nested lf instance!"

# interpreter for shell commands (needs to be POSIX compatible)
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
# set ifs "\n"

set scrolloff 10
set ratios 1:2
set incsearch
set period 1
set previewer ~/.config/lf/pv.sh
set promptfmt "\033[2m%w/%f\033[0m"
set errorfmt "\033[1;91m%s\033[0m"
set tabstop 4
# set info "size"

map i $LESSOPEN="| ~/.config/lf/pv.sh %s" less -R $f

# use enter for shell commands
map <enter> shell

# kakoune-like navigation
map gk top
map gj bottom

map K half-up
map J half-down

# execute current file (must be executable)
map x $$f
map X !$f

# put files into trash, requires trash-cli
cmd trash $IFS="`printf '\n\t'`"; trash $fx
map D trash

# yank path to clipboard
cmd yank-dirname $dirname -- "$f" | head -c-1 | wl-copy
cmd yank-path $printf '%s' "$fx" | wl-copy
cmd yank-basename $basename -a -- $fx | head -c-1 | wl-copy
map Y :yank-path

# recursively make dirs
cmd mkdir %{{
    IFS=" "
    mkdir -p -- "$*"
    lf -remote "send $id select \"$*\""
}}
map a push %mkdir<space>

# new file
# map n push $touch<space>

# new folder with selected files
cmd newfold ${{
    set -f
    read newd
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}
map <a-a> newfold

# map R bulk-rename
map R $printf '%s\n' $fx | vidir -

# extract archives
cmd extract ${{
    set -f
    unar $f
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# jump to file with fzf
cmd jump ${{
    res="$(fd . -H -d 4 | fzf | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ]; then
        cmd="cd"
    else
        cmd="select"
    fi
    lf -remote "send $id $cmd \"$res\""
}}
map <c-f> :jump

# jump to folder with zoxide
cmd autojump %lf -remote "send $id cd '$(zoxide query $1)'"
map <c-j> push :autojump<space>

cmd open-with %"$@" $fx
map O push :open-with<space>

# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}
map P :link

cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do xdg-open $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd open-and-quit ${{
    lf -remote "send open"
    lf -remote "send quit"
}}
map o :open-and-quit

# cmd on-cd &{{
#     # display git repository status in your prompt
#     git=$("starship module git_branch" " (%s)") || true
#     fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%d\033[0m\033[1m%f$git\033[0m"
#     lf -remote "send $id set promptfmt \"$git\""
# }}
# vi:ft=sh
